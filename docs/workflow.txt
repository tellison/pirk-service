== Workflow of REST API (pseudocode throughout) ==

1. Start by figuring out what data the server can provide us.

Request:
  GET /v1/data_schemas
  
Response:
  200 OK - and a possibly empty array of data schema names in body


curl -i http://localhost:8080/v1/data_schemas

[
  "Simple Data Schema 1"
]

==================

2. Get a particular data schema

Request:
  GET /v1/data_schemas/{name}
  
curl -i  http://localhost:8080/v1/data_schemas/Simple+Data+Schema+1

{
  "name":"Simple Data Schema 1",
  "elements": [
    {
      "name":"children",
      "dataType":"string",
      "isArray":true
    },
    {
      "name":"name",
      "dataType":"string",
      "isArray":false
    },
    {
      "name":"age",
      "dataType":"int",
      "isArray":false
    }
  ]
}
==================


3. Next define a query over the data

Request:
  PUT /v1/queries/e0115ec3-9b0b-43d8-bb92-c9f66d1ea023
    
  body:{
    
    queryInfo: {
	    "identifier": "e0115ec3-9b0b-43d8-bb92-c9f66d1ea023",
	    "numSelectors": 2,
	    "queryType": "simple query",
	    "hashBitSize": 12,
	    "hashKey": "my key",
	    "numBitsPerDataElement": 96,
	    "dataPartitionBitSize": 8,
	    "numPartitionsPerDataElement": 12,
	}
	    
    query_schema: {
        name: foo
        data_schema_name: your data schema
        element_names: { first, second, tenth }
        filter: org.apache.pirk.SomeFilter
        filtered_fields: { third, fifth, tenth }
      }
      
  "N": 30049399560646469676005493659082752898785212655599017144565972358099446280042588990477674146012309524890531874672789
  }

Response:
  201 Created - and a URL to the query
  
sh PUT.sh test_query.json http://localhost:8080/v1/queries/e0115ec3-9b0b-43d8-bb92-c9f66d1ea023


==================

3.  Run the query

Request:
  POST /v1/queries/<uuid>


Response:
  200 OK - and a body containing results
    
    array of entity elements
    {
     first: value
     second: value
     tenth: value
    }
    {
     first: value
     second: value
     tenth: value
    }
 
 