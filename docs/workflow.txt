== Workflow of REST API (pseudocode throughout) ==


1. Start by figuring out what data sets the server will allow us to query.

Request:
  GET /v1/data_sets
  
Response:
  200 OK - and a possibly empty array of data set names in body


curl -i http://localhost:8080/v1/data_sets

[
  "Simple Data Set 1"
]


==================


2. Get details of a particular data set

Request:
  GET /v1/data_sets/{name}
  
curl -i  http://localhost:8080/v1/data_schemas/Simple+Data+Set+1
curl http://localhost:8080/v1/data_schemas/Simple+Data+Set+1 | python -m json.tool

{
  "name":"Simple Data Set 1",
  "elements": [
    {
      "name":"children",
      "dataType":"string",
      "isArray":true
    },
    {
      "name":"name",
      "dataType":"string",
      "isArray":false
    },
    {
      "name":"age",
      "dataType":"int",
      "isArray":false
    }
  ]
}


==================


3. Next define a query over the data

Request:
  PUT /v1/queries/{id}
    
Response:
  201 Created - and a URL to the query
  
sh PUT.sh test_query.json http://localhost:8080/v1/queries/e0115ec3-9b0b-43d8-bb92-c9f66d1ea023


==================


4. Retrieve a previously stored query

Request:
  GET /v1/queries/e0115ec3-9b0b-43d8-bb92-c9f66d1ea023
    
Response:
  200 OK - And the query in the body
  
curl http://localhost:8080/v1/queries/e0115ec3-9b0b-43d8-bb92-c9f66d1ea023 | python -m json.tool


==================


5.  Run the query

Request:
  POST /v1/queries/<uuid>


Response:
  200 OK - and a body containing results
    
    array of entity elements
    {
     first: value
     second: value
     tenth: value
    }
    {
     first: value
     second: value
     tenth: value
    }
 
 ====
 
 editor.swagger.io

 